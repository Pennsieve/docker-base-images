input { }

filter {
  if [log_type] == "catalina" {

    ############################################################################################
    # Fix for new version of filebeat                                                          #
    # https://discuss.elastic.co/t/logstash-errors-after-upgrading-to-filebeat-6-3-0/135984/28 #
    mutate { remove_field => [ "[host]" ] }
    mutate { add_field => { "host" => "%{[beat][hostname]}" }}
    ############################################################################################

    mutate { replace => {"type" => "ec2"} }

    # Normalize Beats Tags
    mutate { add_field => { "original_message" => "%{message}"} }
    mutate { add_field => { "[blackfynn][environment_name]" => "%{environment_name}"} }
    mutate { add_field => { "[blackfynn][tier]" => "%{tier}"} }
    mutate { add_field => { "[blackfynn][service_name]" => "%{service_name}"} }

    mutate { remove_field => [ "environment_name" ] }
    mutate { remove_field => [ "tier" ] }
    mutate { remove_field => [ "service_name" ] }


    grok {
      match => [ "message", "\[%{TIMESTAMP_ISO8601:cat2actualtimestamp}\] \[%{DATA:thread}\] \[%{LOGLEVEL:loglevel}\] \[%{DATA:logger}\] %{GREEDYDATA:log_message}" ]
    }

    if "_grokparsefailure" not in [tags] {
      date { match => [ "cat2actualtimestamp", "ISO8601" ] }
      mutate { replace => { "message" => "%{log_message}" } }
      mutate { remove_field => [ "log_message" ] }

    } else {
      mutate { remove_tag => [ "_grokparsefailure" ] }
      mutate { remove_field => [ "log_message" ] }

      grok {
        match => [ "message", "%{MONTHDAY:monthday}-%{MONTH:month}-%{YEAR:year} %{HOUR:hour}:?%{MINUTE:minute}:%{SECOND:second} %{LOGLEVEL:loglevel} \[%{GREEDYDATA:method}\] %{JAVACLASS:class} %{GREEDYDATA:log_message}" ]
        add_field => ["cat1actualtimestamp", "%{month} %{monthday} %{year} %{hour}:%{minute}:%{second}"]
      }

      if "_grokparsefailure" not in [tags] {
        date { match => [ "cat1actualtimestamp", "MMM dd yyyy HH:mm:ss.SSS" ] }
        mutate { remove_field => [ "month", "monthday", "year", "hour", "minute", "second" ] }
        mutate { replace => { "message" => "%{log_message}" } }
        mutate { remove_field => [ "log_message" ] }

      } else {
        mutate { remove_tag => [ "_grokparsefailure" ] }
        mutate { remove_field => [ "log_message" ] }
        grok {
          match => [ "message", "\[%{LOGLEVEL:loglevel}\] \[%{MONTHNUM:monthnumber}/%{MONTHDAY:monthdaynumber}/%{YEAR:year} %{HOUR:hour}:?%{MINUTE:minute}:%{SECOND:second}\] \[%{DATA:log_type}-%{DATA:appActorSystem}\.%{DATA:appActorSystemChannel}\] \[%{DATA:appActorSystemUri}\] %{GREEDYDATA:log_message}" ]
          add_field => ["cat2actualtimestamp", "%{year}-%{monthnumber}-%{monthdaynumber}T%{hour}:%{minute}:%{second}Z"]
        }

        if "_grokparsefailure" not in [tags] {
          mutate { replace => { "log_type" => "appActorSystem" } }
          date { match => [ "cat2actualtimestamp", "ISO8601" ] }
          mutate { remove_field => [ "monthnumber", "monthdaynumber", "year", "hour", "minute", "second" ] } }
          mutate { replace => { "message" => "%{log_message}" } }
          mutate { remove_field => [ "log_message" ] }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["ops-elk-data-use100.blackfynn.io:9200","ops-elk-data-use101.blackfynn.io:9200","ops-elk-data-use102.blackfynn.io:9200"]
    document_id => "%{[@metadata][fingerprint]}"
  }
}
