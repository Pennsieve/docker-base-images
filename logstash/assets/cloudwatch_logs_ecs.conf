input {
  cloudwatch_logs {
    log_group => [
      "/aws/ecs/dev-ecs-cluster-use1",
      "/aws/ecs/prod-ecs-cluster-use1"
    ]
    #codec => multiline {
    #  #pattern => "(^.+Exception: .+)|(^\s+at .+)|(^\s+... \d+ more)|(^\s*Caused by:.+)"
    #  pattern => "^\s+at .+"
    #  what   => "previous"
    #}
    type => "ecs"
    tags => "ecs_cloudwatch_logs"
  }
}

filter {
  if [type] == "ecs" {

    if [message] =~ /^(SelfCheck: Database status OK.)/ { drop { } }
    if [message] =~ "ELB-HealthChecker" { drop {} }
    if [message] =~ /GET\ \/health/ { drop {} }

    mutate { add_field => { "original_message" => "%{message}"} }

    grok { match => [ "[cloudwatch_logs][log_stream]", "%{DATA:[ecs][task_name]}(/%{GREEDYDATA:[ecs][container_name]})?/%{GREEDYDATA:[ecs][container_id]}" ] }
    grok { match => [ "[cloudwatch_logs][log_group]", "/%{DATA}/%{DATA}/%{GREEDYDATA:[ecs][cluster]}" ] }
    grok { match => [ "[ecs][cluster]", "%{DATA:[blackfynn][environment_name]}-%{DATA:[blackfynn][region_shortname]}" ] }

    if [ecs][task_name] == "ecs-agent" {
      mutate { add_field => { "[blackfynn][service_name]" => "ecs-agent"} }
      grok { match => [ "message", "%{TIMESTAMP_ISO8601:actual_timestamp} \[%{LOGLEVEL:loglevel}\] %{GREEDYDATA:log_message}" ] }

      if "_grokparsefailure" not in [tags] {
        date { match => [ "actual_timestamp", "ISO8601" ] }
        mutate { replace => { "message" => "%{log_message}" } }
        mutate { remove_field => [ "actual_timestamp", "[cloudwatch_logs][ingestion_time]", "log_message" ] }
      }
    } else {
      grok { match => [ "[ecs][task_name]", "%{DATA}-%{GREEDYDATA:[blackfynn][service_name]}-%{DATA}" ] }
      mutate { add_field => { "[blackfynn][service_name]" => "%{[ecs][container_name]}" } }
    }

    if [blackfynn][tier] == "uploads-consumer" {
      grok {
        match => [ "message", "\[%{TIMESTAMP_ISO8601:actual_timestamp}\] \[%{DATA:thread}\] \[%{LOGLEVEL:loglevel}\] \[%{DATA:logger}\] \[%{UUID:[blackfynn][import_id]}?\] - %{GREEDYDATA:log_message}" ]
      }

      if "_grokparsefailure" not in [tags] {
        date { match => [ "actual_timestamp", "ISO8601" ] }
        mutate { replace => { "message" => "%{log_message}" } }
        mutate { remove_field => [ "actual_timestamp", "log_message" ] }
      }
    }

    if [ecs][task_name] == "gateway" {
      mutate { remove_tag => [ "_grokparsefailure" ] }

      grok {
        match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\""] }
      }
      if "_grokparsefailure" in [tags] {
        mutate { remove_tag => [ "_grokparsefailure" ] }
        grok {
          match => { "message" => ["%{DATA:[nginx][error][time]} \[%{DATA:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}"] }
        }
      } else {
        useragent {
          source => "[nginx][access][agent]"
          target => "[nginx][access][user_agent]"
          remove_field => "[nginx][access][agent]"
        }
        grok {
          match => [ "[nginx][access][url]", "\/%{DATA:[blackfynn][endpoint]}\/%{GREEDYDATA}" ]
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["ops-elk-data-use100.blackfynn.io:9200","ops-elk-data-use101.blackfynn.io:9200","ops-elk-data-use102.blackfynn.io:9200"]
    document_id => "%{[@metadata][fingerprint]}"
  }
}
