input {
  cloudwatch_logs {
    log_group => [ "/aws/lambda/" ]
    log_group_prefix => "true"
    type => "lambda"
    tags => "lambda, cloudwatch"
    codec => multiline {
      pattern => "^[[:space:]]|^'|^u|^Caused by:|^com.*|Method:|^Status:|^URI:|^java.net|^StackTrace:|io.netty.*"
      what   => "previous"
    }
  }

  cloudwatch_logs {
    log_group => [ 
      "/aws/lambda/prod-etl-trigger-use1",
      "/aws/lambda/dev-etl-trigger-use1"
    ]
    log_group_prefix => "true"
    type => "lambda"
    tags => "lambda, cloudwatch"
    codec => multiline {
      pattern => "^[[:space:]]|^'|^u|^Caused by:|^com.*|Method:|^Status:|^URI:|^java.net|^StackTrace:|io.netty.*"
      what   => "previous"
    }
  }
}

filter {
  if [type] == "lambda" {

    mutate { add_field => { "original_message" => "%{message}"} }

    if "REPORT RequestId" in [message] {
      #mutate { replace => { "message" => "REPORT RequestId: %{[lambda][request_id]}" } }
      drop {}
    } 

    if [message] =~ /^(END|START)/ {
      drop { }
    }

    # Try to get [blackfynn][environment_name], [blackfynn][service_name] and [blackfynn][tier] from log_group. Remove grok failures from tags upon failure
    grok { match => [ "[cloudwatch_logs][log_group]", "/%{DATA}/%{DATA}/%{DATA:[blackfynn][environment_name]}-%{DATA:[blackfynn][service_name]}-%{DATA:[blackfynn][tier]}-%{DATA}" ] }

    if "_grokparsefailure" in [tags] {
        mutate { remove_tag => [ "_grokparsefailure" ] }
    }

    # We should migrate all logs to use JSON
    if [blackfynn][tier] == "egress" {
      mutate { replace => { "[blackfynn][service_name]" => "etl" } }

      if [message] =~ /^(RequestId)/ {
        drop { }
      }
      
      json {
        source => "message"
      }

      grok { match => [ "[cloudwatch_logs][log_group]", "/%{DATA}/%{DATA}/%{DATA:[blackfynn][environment_name]}-%{DATA:[blackfynn][service_name]}-%{DATA:[blackfynn][tier]}-%{DATA}" ] }

      if "fargate" in [message] {
        mutate { replace => { "message" => "FARGATE TASK - %{[fargate][lastStatus]}" } }
      } else {
        mutate { replace => { "message" => "BATCH TASK - %{[batch][status]}" } }
      }
      date { match => [ "timestamp", "UNIX_MS" ] }
      mutate { remove_field => [ "timestamp" ] }
      
      ## THIS REQUIRES A REINDEX
      #date {
      #    match => [ "[batch][stoppedAt]", "UNIX_MS" ]
      #    target => "[batch][stoppedAt]"
      #}

      #date {
      #    match => [ "[batch][createdAt]", "UNIX_MS" ]
      #    target => "[batch][createdAt]"
      #}

      #date {
      #    match => [ "[batch][stoppedAt]", "UNIX_MS" ]
      #    target => "[batch][stoppedAt]"
      #}

    } else {
      # LOGS THAT AREN'T JSON

      # Try to parse log format and apply timestamp if it succeeds
      grok { match => [ "[cloudwatch_logs][log_group]", "/%{DATA}/%{DATA}/%{GREEDYDATA:[lambda][function]}" ] }
      grok { match => [ "[cloudwatch_logs][log_stream]", "%{YEAR}/%{MONTHNUM}/%{MONTHDAY}/\[%{DATA:[lambda][version]}\]%{GREEDYDATA:[lambda][request_id]}" ] }

      grok { match => [ "message", "\[%{TIMESTAMP_ISO8601:actual_timestamp}\] \[%{LOGLEVEL:loglevel}\] \[%{DATA:module}\] \[%{UUID:[blackfynn][import_id]}?\] - %{GREEDYDATA:log_message}" ] }

      if "_grokparsefailure" not in [tags] {
        date { match => [ "actual_timestamp", "ISO8601" ] }
        mutate { replace => { "message" => "%{log_message}" } }
        mutate { remove_field => [ "actual_timestamp", "[cloudwatch_logs][ingestion_time]", "log_message" ] }

      } else {
        # Take into account Lambda's stats event
        mutate { remove_tag => [ "_grokparsefailure" ] }
        mutate { remove_field => [ "[cloudwatch_logs][ingestion_time]" ] }

        grok {
          match => [ "message", "%{DATA}\: %{DATA:[lambda][request_id]}\t%{DATA} %{BASE16FLOAT:[lambda][duration_ms]} %{DATA}: %{BASE16FLOAT:[lambda][billed_duration_ms]} %{DATA}: %{BASE10NUM:[lambda][max_memory_size_mb]} %{DATA}: %{BASE10NUM:[lambda][max_memory_used_mb]}" ]
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["ops-elk-data-use100.blackfynn.io:9200","ops-elk-data-use101.blackfynn.io:9200","ops-elk-data-use102.blackfynn.io:9200"]
    document_id => "%{[@metadata][fingerprint]}"
  }
}
