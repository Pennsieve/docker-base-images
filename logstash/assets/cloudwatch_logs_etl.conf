input {
  cloudwatch_logs {
    log_group => [
      "/aws/lambda/dev-etl-egress-lambda-use1",
      "/aws/lambda/dev-etl-ingress-lambda-use1"
    ]
    type => "lambda"
    tags => "lambda_cloudwatch_logs"
    add_field => {
      "[blackfynn][environment_name]" => "dev"
    }
    codec => multiline {
      pattern => "^[[:space:]]|^'|^u|^Caused by:|^com.*|Method:|^Status:|^URI:|^java.net|^StackTrace:|io.netty.*"
      what   => "previous"
    }
  }

  cloudwatch_logs {
    log_group => [
      "/aws/lambda/prod-etl-egress-lambda-use1",
      "/aws/lambda/prod-etl-ingress-lambda-use1"
    ]
    type => "lambda"
    tags => "lambda_cloudwatch_logs"
    add_field => {
      "[blackfynn][environment_name]" => "prod"
    }
    codec => multiline {
      pattern => "^[[:space:]]|^'|^u|^Caused by:|^com.*|Method:|^Status:|^URI:|^java.net|^StackTrace:|io.netty.*"
      what   => "previous"
    }
  }
}

filter {
  if [type] == "lambda" {

    grok {
      match => [ "[cloudwatch_logs][log_group]", "/%{DATA}/%{DATA}/%{GREEDYDATA:[lambda][function]}" ]
    }

    mutate { add_field => { "original_message" => "%{message}"} }

    grok {
      match => [ "[cloudwatch_logs][log_stream]", "%{YEAR}/%{MONTHNUM}/%{MONTHDAY}/\[%{DATA}\]%{GREEDYDATA:[lambda][request_id]}" ]
    }

    grok {
      match => [ "message", "\[%{TIMESTAMP_ISO8601:actual_timestamp}\] \[%{LOGLEVEL:loglevel}\] \[%{DATA:module}\] \[%{UUID:[blackfynn][import_id]}?\] - %{GREEDYDATA:log_message}" ]
    }

    if "_grokparsefailure" not in [tags] {
      date { match => [ "actual_timestamp", "ISO8601" ] }
      mutate { replace => { "message" => "%{log_message}" } }
      mutate { remove_field => [ "actual_timestamp", "[cloudwatch_logs][ingestion_time]", "log_message" ] }

    } else {
      mutate { remove_tag => [ "_grokparsefailure" ] }
      mutate { remove_field => [ "[cloudwatch_logs][ingestion_time]" ] }

      grok {
        match => [ "message", "%{DATA}\: %{DATA:[lambda][request_id]}\t%{DATA} %{BASE16FLOAT:[lambda][duration_ms]} %{DATA}: %{BASE16FLOAT:[lambda][billed_duration_ms]} %{DATA}: %{BASE10NUM:[lambda][max_memory_size_mb]} %{DATA}: %{BASE10NUM:[lambda][max_memory_used_mb]}" ]
      }

      if "REPORT RequestId" in [message] {
        mutate { replace => { "message" => "REPORT RequestId: %{[lambda][request_id]}" } }
      } 

      if [message] =~ /^(END|START)/ {
        drop { }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["ops-elk-data-use100.blackfynn.io:9200","ops-elk-data-use101.blackfynn.io:9200","ops-elk-data-use102.blackfynn.io:9200"]
    document_id => "%{[@metadata][fingerprint]}"
  }
}
